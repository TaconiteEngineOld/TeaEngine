-- Define the Widget record so it can be used later on.
global Widget = @record {

	-- Strings
	widgetName: string, --
	widgetType: string, --

	widgetText: string, --

	-- Cints	
	fontSize: cint, --

	-- Vector2s
	position: Vector2, --
	size: Vector2, --

	-- Engine dealt Cints
	borderSize: cint, --

	-- Booleans
	spaceOccupied: boolean,

	-- Engine dealt Colours
	borderColor: Color,
	bgColor: Color,
	fgColor: Color,

	-- Engine dealt Vector2s
	tl: Vector2,
	br: Vector2,

	tlW: Vector2,
	brW: Vector2,

	windowPosition: Vector2,

	-- Engine dealt Booleans
	isHighlighted: boolean,
	alwaysDrawn: boolean,
	autoSize: boolean,
	isShown: boolean,
	isDown: boolean,
}

-- Define the UIWindow record so it can be used later on.
global UIWindow = @record {

	-- Strings
	menuBarText: string,
	windowName: string,

	-- Vector2s
	size: Vector2,
	pos: Vector2,

	-- Colors
	borderColor: Color,
	bgColor: Color,
	fgColor: Color,

	-- Cints
	nextWidgetSpotAvailable: cint,
	menuTextPadding: cint,
	menuFontSize: cint,
	menuBarSize: cint,
	borderSize: cint,
	
	-- Booleans
	menuBarEnabled: boolean,
	
	-- Uninitialised Booleans
	spaceOccupied: boolean,
	isShown: boolean,
	moving: boolean,

	-- Widgets
	Widgets: vector(Widget),
	widgetSpotsAvailable: vector(boolean),

	-- Uninitialised Vector2s
	originalPosition: Vector2,
	mouseOffset: Vector2,

	-- Uninitialised Cints
	grabDebounce: cint,
}

-- Call Init on the Widget to set the size if `autoSize` is enabled and also set the variables for the top left and bottom right vectors for detection of the cursor, this must be called on all widgets that are created.
function Widget:Init()
	if self.autoSize then
		self.size.x = MeasureText(self.widgetText, self.fontSize) + self.borderSize * 4
		self.size.y = self.fontSize * 2
	end

	self.tl.x = self.position.x
	self.tl.y = self.position.y

	self.br.x = self.size.x
	self.br.y = self.size.y
end

-- Call UpdateVW to create the variables for top let and bottom right not relative to the window but to the screen.
function Widget:UpdateVW()
	self.tlW.x = self.tl.x + self.windowPosition.x
	self.tlW.y = self.tl.y + self.windowPosition.y

	self.brW.x = self.br.x + self.tl.x + self.windowPosition.x
	self.brW.y = self.br.y + self.tl.y + self.windowPosition.y
end

--[[ 
Call SetColors on a widget to set the colors for the border, the background and the foregorund. (Chaining possible)*

Note: from here on out `*` means it is required
]]
function Widget:SetColors(uBorderColor: Color, uFGColor: Color, uBGColor: Color)
	self.borderColor = uBorderColor
	self.fgColor = uFGColor
	self.bgColor = uBGColor
	return self
end

-- Call SetText on a widget to set the text of the widget. (Chaining possible)
function Widget:SetText(uWidgetText: string): *Widget
	self.widgetText = uWidgetText
	return self
end

-- Call SetWidgetType to set the `widgeType` variable on the widget. (Chaining possible)*
function Widget:SetWidgetType(uWidgetType: string): *Widget
	self.widgetType = uWidgetType
	return self
end

-- Call SetFontSize to set the `fontSize` variable on the widget. (Chaining possible)
function Widget:SetFontSize(uWidgetFontSize: cint): *Widget
	self.fontSize = uWidgetFontSize
	return self
end

-- Call SetPosition on a widget to set the position variable. (Chaining possible)*
function Widget:SetPosition(uWidgetPosition: Vector2): *Widget
	self.position = uWidgetPosition
	return self
end

-- Call SetSize on a widget to set the size variable. (Chaining possible)*
function Widget:SetSize(uWidgetSize: Vector2): *Widget
	self.size = uWidgetSize
	return self
end

-- Call SetBorderSize to define the border size variable on a widget. (Chaining possible)
function Widget:SetBorderSize(uWidgetBorderSize: cint): *Widget
	self.borderSize = uWidgetBorderSize
	return self
end

-- Call SetAlwaysDrawn to define whether the widget should be drawn always or not. (Chaining Possible)
function Widget:SetAlwaysDrawn(uWidgetAlwaysDrawn: boolean): *Widget
	self.alwaysDrawn = uWidgetAlwaysDrawn
	return self
end

-- Call SetAutoSize to define whether the widget should set it's own size or not. (Chaining possible)
function Widget:SetAutoSize(uWidgetAutoSize: boolean): *Widget
	self.autoSize = uWidgetAutoSize
	return self
end

-- Call Draw on a widget to make the widget draw depending on it's type
function Widget:Draw()
	if self.widgetType == "Button" then
		if self.isShown or self.alwaysDrawn then
			if self.isDown then
				Utility:DrawBoxWithOutline((Vector2){self.position.x + self.windowPosition.x, self.position.y + self.windowPosition.y}, (Vector2){self.size.x, self.size.y}, self.borderSize, (Color){self.bgColor.r + 20, self.bgColor.g + 20, self.bgColor.b + 20, self.bgColor.a}, self.borderColor)
			elseif self.isHighlighted then
				Utility:DrawBoxWithOutline((Vector2){self.position.x + self.windowPosition.x, self.position.y + self.windowPosition.y}, (Vector2){self.size.x, self.size.y}, self.borderSize, (Color){self.bgColor.r + 10, self.bgColor.g + 10, self.bgColor.b + 10, self.bgColor.a}, self.borderColor)
			else
				Utility:DrawBoxWithOutline((Vector2){self.position.x + self.windowPosition.x, self.position.y + self.windowPosition.y}, (Vector2){self.size.x, self.size.y}, self.borderSize, self.bgColor, self.borderColor)
			end
		
			DrawText(self.widgetText, self.tlW.x + self.borderSize * 2, self.tlW.y + self.borderSize * 2, self.fontSize, self.fgColor)
		end
	elseif self.widgetType == "Selectable" then
		if self.isShown or self.alwaysDrawn then
			if self.isDown then
				Utility:DrawBoxWithOutline((Vector2){self.position.x + self.windowPosition.x, self.position.y + self.windowPosition.y}, (Vector2){self.size.x, self.size.y}, self.borderSize, self.bgColor, (Color){self.borderColor.r + 30, self.borderColor.g + 30, self.borderColor.b + 30, self.borderColor.a})
			else
				Utility:DrawBoxWithOutline((Vector2){self.position.x + self.windowPosition.x, self.position.y + self.windowPosition.y}, (Vector2){self.size.x, self.size.y}, self.borderSize, self.bgColor, self.borderColor)
			end

			DrawText(self.widgetText, self.tlW.x + self.borderSize * 2, self.tlW.y + self.borderSize * 2, self.fontSize, self.fgColor)
		end
	end
end

-- Call Update on a widget to make the widget run it's logic. For example, a Button would decide whether it is highlighted and whether it is clicked or not.
function Widget:Update()
	if self.widgetType == "Button" or self.widgetType == "Selectable" then
		if Utility:IsInsideQuad((Vector2){Mouse.x, Mouse.y}, self.tlW, self.brW) then
			self.isHighlighted = true
		else
			self.isHighlighted = false
		end
	elseif self.widgetType == "Selectable" then else
		InformationHandler:Warn("Unaware of the widget type")
	end

	if self.spaceOccupied then
		if self.widgetType == "Button" then
			if self.isHighlighted and Mouse.LMBPressed then
				EventManager:FireEvent(self.widgetName)
			end

			if self.isHighlighted and Mouse.LMBDown then
				self.isDown = true		
			else
				self.isDown = false
			end
		elseif self.widgetType == "Selectable" then
			if self.isHighlighted and Mouse.LMBPressed then
				EventManager:FireEvent(self.widgetName)
			end

			if self.isHighlighted and Mouse.LMBPressed then
				EventManager:FirePassableEvent("SetSelectableCall", self.widgetName)
			end
		else
			InformationHandler:Warn("Unaware of the widget type")
		end
	end
	
	self:Draw()
end

-- Call Init on a window to set it's initial variables
function UIWindow:Init()
	self.originalPosition = self.pos
end

-- Call Update on a window to run the windows logic. For example, the window detecting whether it should be moved or not by the cursor
function UIWindow:Update()
	if EventManager:GetEvent(self.windowName.."ResetDebounce").fired then
		self.grabDebounce = 0
	else
		self.grabDebounce = self.grabDebounce + 1
	end
	
	if Mouse.LMBPressed then	
		if Utility:IsInsideQuad((Vector2){Mouse.x, Mouse.y}, (Vector2){self.pos.x, self.pos.y}, (Vector2){self.pos.x + self.size.x, self.pos.y + self.menuBarSize}) and not Mouse.insideUIElement and self.grabDebounce >= 4 then
				self.mouseOffset = (Vector2){self.pos.x - Mouse.x, self.pos.y - Mouse.y}
				Mouse.isGrabbing = true
				Mouse.windowGrabbed = self.windowName
		end
	elseif Mouse.LMBReleased then
		Mouse.isGrabbing = false
	end

	if Mouse.isGrabbing and Mouse.windowGrabbed == self.windowName and not Mouse.insideUIElement then
		self.pos = (Vector2){Mouse.x + self.mouseOffset.x, Mouse.y + self.mouseOffset.y}
	end
end

-- Call Draw on a window to make the window draw all of the components of the window.
function UIWindow:Draw()
	if self.isShown then
		if self.borderSize > 0 then
			DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.size.y, self.borderColor)
			DrawRectangle(self.pos.x + self.borderSize, self.pos.y + self.borderSize, self.size.x - self.borderSize * 2, self.size.y - self.borderSize * 2, self.bgColor)
		else
			DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.size.y, self.bgColor)
		end
	end

	if self.menuBarEnabled then
		DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.menuBarSize, self.borderColor) 
		DrawRectangle(self.pos.x + self.borderSize, self.pos.y + self.borderSize, self.size.x - self.borderSize * 2, self.menuBarSize - self.borderSize * 2, self.bgColor)
		DrawText(self.menuBarText, self.pos.x	+ self.borderSize + self.menuTextPadding, self.pos.y + self.borderSize + self.menuTextPadding, self.menuFontSize, self.fgColor)
	end
end
