-- Create a Renderer record
local RendererR = @record {
	isRenderingIntro: boolean,
	isRenderingFrames: boolean,
	frameCount: cint,
	realFrameCount: cint,

	borderColor: Color,
	bgColor: Color,
	fgColor: Color,
}

-- Call DrawBoxWithOutline to draw a box with an outline
function RendererR:DrawBoxWithOutlined(pos: Vector2, size: Vector2, pad: cint, bgColor: Color, borderColor: Color)
	DrawRectangle(pos.x, pos.y, size.x, size.y, borderColor)
	DrawRectangle(pos.x + pad, pos.y + pad, size.x - pad * 2, size.y - pad * 2, bgColor)
end

-- Call BeginRenderIntro to draw the intro of the game, usually ran at startup
function RendererR:BeginRenderIntro()
	while self.isRenderingIntro do
		if self.frameCount >= 48 then
			self.isRenderingFrames = false
		end

		if self.frameCount >= 54 then
			self.isRenderingIntro = false 
		end

		local localTexture: Texture2D

		if self.isRenderingFrames then
			localTexture = LoadTexture("engine/intro-manager/resources/frames/TeaEngineIntro-"..tostring(self.frameCount)..".png")
		end

		-- void DrawTexture(Texture2D texture, int posX, int posY, Color tint);
		BeginDrawing()
		ClearBackground((Color){12, 15, 16, 255})

		if self.isRenderingFrames then
			DrawTexture(localTexture, 0, 0, WHITE);
		end

		EndDrawing()

		self.realFrameCount = self.realFrameCount + 1

		if self.realFrameCount % 2 == 0 then
			self.frameCount = self.frameCount + 1
		end
	end
end

-- Call SetupEngineUI to create all of the elements for the Engine UI
function RendererR:SetupEngineUI()
	self.borderColor = (Color){15, 15, 15, 255}
	self.bgColor = (Color){40, 40, 40, 255}
	self.fgColor = (Color){200, 200, 200, 255}

	--[[ Create windows (Hierarchy, Inspector) ]]--
	UIManager:AddWindow("Hierarchy", "HierarchyWindow", (Vector2){screenWidth / 4, screenHeight - screenHeight / 4}, (Vector2){0, 0}, self.borderColor, self.bgColor, self.fgColor, 8, 12, 32, 4 ,true)
	UIManager:AddWindow("Inspector", "InspectorWindow", (Vector2){screenWidth / 4, screenHeight / 4}, (Vector2){screenWidth / 4, 0}, self.borderColor, self.bgColor, self.fgColor, 8, 12, 32, 4, true)

	--[[ Create widgets for the inspector ]]--
	UIManager:AddWidget("InspectorWindow", "PlayButton")
		:SetWidgetType("Button")
		:SetText("Play")
		:SetColors(self.borderColor, self.fgColor, self.bgColor)
		:SetFontSize(12)
		:SetBorderSize(2)
		:SetPosition((Vector2){20, 42})
		:SetAutoSize(true)
		:Init()

	UIManager:AddWidget("InspectorWindow", "StopButton")
		:SetWidgetType("Button")
		:SetText("Stop")
		:SetColors(self.borderColor, self.fgColor, self.bgColor)
		:SetFontSize(12)
		:SetBorderSize(2)
		:SetPosition((Vector2){20, 68})
		:SetAutoSize(true)
		:Init()

	UIManager:AddWidget("HierarchyWindow", "PlayButton")
		:SetWidgetType("Button")
		:SetText("Add")
		:SetColors(self.borderColor, self.fgColor, self.bgColor)
		:SetFontSize(12)
		:SetBorderSize(2)
		:SetPosition((Vector2){16, 36})
		:SetAutoSize(true)
		:Init()

	UIManager:AddWidget("HierarchyWindow", "Selectable1")
		:SetWidgetType("Selectable")
		:SetText("Selectable 1 is here")
		:SetColors(self.borderColor, self.fgColor, self.bgColor)
		:SetFontSize(12)
		:SetBorderSize(2)
		:SetPosition((Vector2){16, 96})
		:SetAutoSize(true)
		:Init()

	UIManager:AddWidget("HierarchyWindow", "Selectable2")
		:SetWidgetType("Selectable")
		:SetText("Selectable 2 is here")
		:SetColors(self.borderColor, self.fgColor, self.bgColor)
		:SetFontSize(12)
		:SetBorderSize(2)
		:SetPosition((Vector2){16, 116})
		:SetAutoSize(true)
		:Init()
end

-- Call Render to draw the frames to the screen
function RendererR:Render()
	ClearBackground((Color){12, 15, 16, 255})
	UIManager:Update()
end

-- Call Init to set all everything
function RendererR:Init()
	--[[ Show the intro screen ]]--
	self:BeginRenderIntro()
	
	--[[ Define screen width variables ]]--
	screenWidth = GetScreenWidth()
	screenHeight = GetScreenHeight()

	--[[ Add events ]]--
	EventManager:AddPassableEvent("SetSelectableCall")

	-- [[ Setup the engine UI ]] --
	self:SetupEngineUI()
end

global Renderer: RendererR

Renderer.isRenderingIntro = true
Renderer.isRenderingFrames = true
